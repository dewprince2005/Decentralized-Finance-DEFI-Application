import React, { useState, useEffect } from 'react';
import { Wallet, TrendingUp, TrendingDown, DollarSign, BarChart3, RefreshCw, AlertCircle } from 'lucide-react';

const DeFiLendingApp = () => {
  const [isConnected, setIsConnected] = useState(false);
  const [account, setAccount] = useState('');
  const [selectedTab, setSelectedTab] = useState('supply');
  const [amount, setAmount] = useState('');
  const [selectedToken, setSelectedToken] = useState('USDC');
  const [markets, setMarkets] = useState([]);
  const [userBalances, setUserBalances] = useState({});
  const [loading, setLoading] = useState(false);

  // Mock data for demonstration
  const mockMarkets = [
    {
      token: 'USDC',
      address: '0x...',
      totalSupply: '1,250,000',
      totalBorrow: '890,000',
      supplyRate: '4.2',
      borrowRate: '6.8',
      utilization: '71.2',
      icon: 'ðŸ’µ'
    },
    {
      token: 'ETH',
      address: '0x...',
      totalSupply: '850',
      totalBorrow: '620',
      supplyRate: '3.8',
      borrowRate: '5.9',
      utilization: '72.9',
      icon: 'âŸ '
    },
    {
      token: 'WBTC',
      address: '0x...',
      totalSupply: '45.2',
      totalBorrow: '28.7',
      supplyRate: '2.1',
      borrowRate: '4.5',
      utilization: '63.5',
      icon: 'â‚¿'
    }
  ];

  const mockUserBalances = {
    USDC: { supplied: '5,000', borrowed: '2,500', wallet: '10,000' },
    ETH: { supplied: '2.5', borrowed: '0', wallet: '5.0' },
    WBTC: { supplied: '0', borrowed: '0.1', wallet: '0.5' }
  };

  useEffect(() => {
    setMarkets(mockMarkets);
    setUserBalances(mockUserBalances);
  }, []);

  const connectWallet = async () => {
    setLoading(true);
    // Simulate wallet connection
    setTimeout(() => {
      setIsConnected(true);
      setAccount('0x1234...5678');
      setLoading(false);
    }, 1000);
  };

  const handleTransaction = async (type) => {
    if (!amount || parseFloat(amount) <= 0) return;
    
    setLoading(true);
    // Simulate transaction
    setTimeout(() => {
      alert(`${type} of ${amount} ${selectedToken} initiated!`);
      setAmount('');
      setLoading(false);
    }, 2000);
  };

  const formatNumber = (num) => {
    return typeof num === 'string' ? num : num.toLocaleString();
  };

  const TabButton = ({ id, label, icon: Icon }) => (
    <button
      onClick={() => setSelectedTab(id)}
      className={`flex items-center space-x-2 px-6 py-3 rounded-t-lg font-medium transition-all ${
        selectedTab === id
          ? 'bg-white text-blue-600 border-b-2 border-blue-600'
          : 'text-gray-600 hover:text-blue-600 hover:bg-gray-50'
      }`}
    >
      <Icon className="w-4 h-4" />
      <span>{label}</span>
    </button>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Header */}
      <nav className="bg-white border-b border-gray-200 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-3">
              <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-2 rounded-lg">
                <DollarSign className="w-6 h-6 text-white" />
              </div>
              <h1 className="text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                DeFiLend Protocol
              </h1>
            </div>
            
            {!isConnected ? (
              <button
                onClick={connectWallet}
                disabled={loading}
                className="flex items-center space-x-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-2 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all disabled:opacity-50"
              >
                {loading ? (
                  <RefreshCw className="w-4 h-4 animate-spin" />
                ) : (
                  <Wallet className="w-4 h-4" />
                )}
                <span>{loading ? 'Connecting...' : 'Connect Wallet'}</span>
              </button>
            ) : (
              <div className="flex items-center space-x-4">
                <div className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">
                  {account}
                </div>
                <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
              </div>
            )}
          </div>
        </div>
      </nav>

      <div className="max-w-7xl mx-auto px-4 py-8">
        {!isConnected ? (
          <div className="text-center py-20">
            <Wallet className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Connect Your Wallet</h2>
            <p className="text-gray-600 mb-6">Connect your wallet to start lending and borrowing</p>
            <button
              onClick={connectWallet}
              disabled={loading}
              className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-8 py-3 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all disabled:opacity-50"
            >
              {loading ? 'Connecting...' : 'Connect Wallet'}
            </button>
          </div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Markets Overview */}
            <div className="lg:col-span-2">
              <div className="bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden">
                <div className="p-6 border-b border-gray-100">
                  <h2 className="text-xl font-semibold flex items-center space-x-2">
                    <BarChart3 className="w-5 h-5 text-blue-600" />
                    <span>Markets</span>
                  </h2>
                </div>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="text-left p-4 font-medium text-gray-700">Asset</th>
                        <th className="text-right p-4 font-medium text-gray-700">Supply APY</th>
                        <th className="text-right p-4 font-medium text-gray-700">Borrow APY</th>
                        <th className="text-right p-4 font-medium text-gray-700">Total Supply</th>
                        <th className="text-right p-4 font-medium text-gray-700">Utilization</th>
                      </tr>
                    </thead>
                    <tbody>
                      {markets.map((market) => (
                        <tr key={market.token} className="border-t border-gray-100 hover:bg-gray-50">
                          <td className="p-4">
                            <div className="flex items-center space-x-3">
                              <span className="text-2xl">{market.icon}</span>
                              <span className="font-medium">{market.token}</span>
                            </div>
                          </td>
                          <td className="text-right p-4">
                            <span className="text-green-600 font-medium">{market.supplyRate}%</span>
                          </td>
                          <td className="text-right p-4">
                            <span className="text-red-600 font-medium">{market.borrowRate}%</span>
                          </td>
                          <td className="text-right p-4">
                            <span className="text-gray-700">{market.totalSupply}</span>
                          </td>
                          <td className="text-right p-4">
                            <div className="flex items-center justify-end space-x-2">
                              <div className="w-16 bg-gray-200 rounded-full h-2">
                                <div 
                                  className="bg-blue-600 h-2 rounded-full"
                                  style={{ width: `${market.utilization}%` }}
                                ></div>
                              </div>
                              <span className="text-sm text-gray-600">{market.utilization}%</span>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            {/* Trading Interface */}
            <div className="space-y-6">
              {/* User Portfolio */}
              <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-6">
                <h3 className="text-lg font-semibold mb-4">Your Portfolio</h3>
                <div className="space-y-4">
                  {Object.entries(userBalances).map(([token, balance]) => (
                    <div key={token} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                      <span className="font-medium">{token}</span>
                      <div className="text-right text-sm">
                        <div className="text-green-600">Supplied: {balance.supplied}</div>
                        <div className="text-red-600">Borrowed: {balance.borrowed}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Trading Panel */}
              <div className="bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden">
                <div className="flex border-b border-gray-100">
                  <TabButton id="supply" label="Supply" icon={TrendingUp} />
                  <TabButton id="borrow" label="Borrow" icon={TrendingDown} />
                </div>

                <div className="p-6">
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Select Token
                      </label>
                      <select
                        value={selectedToken}
                        onChange={(e) => setSelectedToken(e.target.value)}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        {markets.map((market) => (
                          <option key={market.token} value={market.token}>
                            {market.icon} {market.token}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Amount
                      </label>
                      <div className="relative">
                        <input
                          type="number"
                          value={amount}
                          onChange={(e) => setAmount(e.target.value)}
                          placeholder="0.00"
                          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                        <button
                          onClick={() => setAmount(userBalances[selectedToken]?.wallet || '0')}
                          className="absolute right-3 top-1/2 transform -translate-y-1/2 text-blue-600 text-sm hover:text-blue-700"
                        >
                          MAX
                        </button>
                      </div>
                      <div className="text-sm text-gray-500 mt-1">
                        Available: {userBalances[selectedToken]?.wallet || '0'} {selectedToken}
                      </div>
                    </div>

                    {selectedTab === 'supply' ? (
                      <div className="bg-green-50 p-4 rounded-lg">
                        <div className="flex items-center space-x-2 text-green-800 mb-2">
                          <TrendingUp className="w-4 h-4" />
                          <span className="font-medium">Supply Details</span>
                        </div>
                        <div className="text-sm text-green-700">
                          <div>Supply APY: {markets.find(m => m.token === selectedToken)?.supplyRate}%</div>
                          <div>You will earn interest on your supplied tokens</div>
                        </div>
                      </div>
                    ) : (
                      <div className="bg-red-50 p-4 rounded-lg">
                        <div className="flex items-center space-x-2 text-red-800 mb-2">
                          <AlertCircle className="w-4 h-4" />
                          <span className="font-medium">Borrow Details</span>
                        </div>
                        <div className="text-sm text-red-700">
                          <div>Borrow APY: {markets.find(m => m.token === selectedToken)?.borrowRate}%</div>
                          <div>You will pay interest on borrowed tokens</div>
                        </div>
                      </div>
                    )}

                    <button
                      onClick={() => handleTransaction(selectedTab)}
                      disabled={!amount || loading}
                      className={`w-full py-3 px-4 rounded-lg font-medium transition-all disabled:opacity-50 ${
                        selectedTab === 'supply'
                          ? 'bg-green-600 hover:bg-green-700 text-white'
                          : 'bg-red-600 hover:bg-red-700 text-white'
                      }`}
                    >
                      {loading ? (
                        <RefreshCw className="w-4 h-4 animate-spin mx-auto" />
                      ) : (
                        `${selectedTab === 'supply' ? 'Supply' : 'Borrow'} ${selectedToken}`
                      )}
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DeFiLendingApp;
